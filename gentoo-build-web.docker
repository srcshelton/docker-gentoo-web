#! /usr/bin/env bash

set -eu
set -o pipefail

cd "$( dirname "$( readlink -e "${0}" )" )" || exit 1

build_name=''
base_dir=''
# shellcheck disable=SC2034 # Set from common/vars.sh
use_essential=''
docker='docker'
docker_readonly=''
environment_filter=''
# shellcheck disable=SC2034
red=''
blue=''
reset=''

# shellcheck disable=SC1091
[ ! -s common/vars.sh ] || . common/vars.sh

IMAGE="${build_name}:latest"
# shellcheck disable=SC1091
[ -s common/run.sh ] && . common/run.sh >/dev/null

if (( EUID )); then
	die "Please re-run '$( basename "${0}" )' as user 'root'"
fi

service='app-admin/webapp-config'
user='root'
group='root'
container_cwd='/var/www'

package=''
package_name=''
package_version=''
repo=''
container_name=''
container_prefix='buildweb'
_docker_resolve "${service%::*}" "${container_prefix}"
# shellcheck disable=SC2001 # POSIX sh compatibility
container_name="$( echo "${package}" | sed 's|/|.|' )"
# shellcheck disable=SC2001 # POSIX sh compatibility
package_name="$( echo "${package_name}" | sed 's|/|.|' )"
fs_name=''
export container_name package_name
echo "${service}" | grep -Fq -- '::' && repo="${service#*::}"

if [ $(( $# )) -gt 1 ] || echo " ${*:-} " | grep -Eq -- ' -(h|-help) '; then
	output >&2 "Usage: $( basename "${0}" ) [--force]"
	output >&2
	output >&2 "Options:"
	output >&2 "        --force : Always rebuild '${package_name}:${package_version}' root image"
	output >&2
	exit 0
fi


if [ "${container_name}" = 'podman' ]; then
	die "Suspicious container name '${container_name}'"
else
	print "Using container name '${container_name}'"
fi

if [ -z "${package_name:-}" ]; then
	die "Cannot extract package name from service name '${service}' (${package})"
fi
if [ -z "${package_version:-}" ]; then
	die "Cannot extract package version from service name '${service}' (${package})"
fi


# from common/vars.sh:
#use_essential="asm ipv6 ithreads mdev nptl threads tls-heartbeat zlib ${use_cpu_flags}"

pre_remove='' pre_pkgs='' pre_use=''
with_use='' extra_pkgs=''
post_pkgs='' post_use=''
php_target=''
python_target=''

# There's probably a better way of doing this, but for now let's assume that
# the php & python configuration for the root system and the confguration for
# the container build environment is the same (... which is reasonable, unless
# overridden, as they share a common portage tree and therefore base set of
# python defaults).
php_target="$( portageq envvar 'PHP_TARGETS' )"
python_target="$( portageq envvar 'PYTHON_SINGLE_TARGET' )"
print "Building for php version '${php_target}'"
print "Building for python version '${python_target}'"

php_targets="$( for t in $( portageq envvar PHP_TARGETS ); do echo "php_targets_${t}"; done | sort -V | head -n 1 )"
print "Building for PHP version(s) '${php_targets}'"


info "Setting build variables for package 'webapp-config' ..."
pre_pkgs='sys-apps/portage dev-libs/libpcre2 sys-apps/help2man sys-devel/gcc sys-apps/busybox sys-apps/grep sys-apps/sed sys-apps/gawk app-alternatives/awk app-admin/eselect dev-lang/php www-servers/lighttpd virtual/httpd-cgi virtual/httpd-fastcgi virtual/httpd-php'
pre_use="-lib-only gawk internal-glib pcre ssl unicode php_targets_${php_target} python_targets_${python_target} python_single_target_${python_target}${use_essential_gcc:+" ${use_essential_gcc}"}"
extra_pkgs='sys-apps/sed'
# aolserver apache cherokee gatling lighttpd nginx +portage tracd uwsgi
with_use="php_targets_${php_target} python_targets_${python_target} python_single_target_${python_target}"
post_pkgs='sys-devel/gcc'
post_use="lib-only"
container_cmd='/bin/true'

if ! [ -s content/webapps.conf ]; then
	warn "file 'content/webapps.conf' not found - only static content will be served"
	sleep 5
else
	eval "$( # <- Syntax
		# shellcheck disable=SC1091
		. ./content/webapps.conf # >/dev/null 2>&1
		export -p | grep -E -- ' (webapp_(pkgs|use)|php_extra_use)='
		#export -p | grep -- ' webapp_pkgs='
	)"

	if [ -z "${webapp_pkgs:-}" ]; then
		warn "file 'content/webapps.conf' defines no webapps - only static content will be served"
		sleep 5
	else
		print "Adding webapp packages '${webapp_pkgs:-}'"
	fi

	post_pkgs="${post_pkgs:+"${post_pkgs} "}${webapp_pkgs:+"${webapp_pkgs} "}sys-apps/busybox"
	post_use="${post_use:+"${post_use} "}internal-glib make-symlinks${php_extra_use:+" ${php_extra_use}"} php_targets_${php_target} python_targets_${python_target}${webapp_use:+" ${webapp_use}"}" #Â static

	unset webapp_pkgs webapp_use php_extra_use
fi

if [ -z "${container_cmd:-}" ]; then
	die "No container command provided"
elif [ "${container_cmd}" = 'podman' ]; then
	die "Invalid container command '${container_cmd}'"
fi

[ -n "${trace:-}" ] && set -o xtrace

# package.accept_keywords
if [ -e "${base_dir:+"${base_dir}/"}etc/portage/package.accept_keywords" ]; then
	print "Mounting $( test -d "${base_dir:+"${base_dir}/"}etc/portage/package.accept_keywords" && echo 'directory' || echo 'file' ) '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.accept_keywords' to '/etc/portage/package.accept_keywords/package.accept_keywords' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.accept_keywords,destination=/etc/portage/package.accept_keywords/package.accept_keywords${docker_readonly:+",${docker_readonly}"}"
else
	note "No 'package.accept_keywords' override found in '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/'"
fi
if [ -e "${base_dir:+"${base_dir}/"}etc/portage/package.accept_keywords.${arch:-}" ]; then
	print "Mounting file '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.accept_keywords.${arch}' to '/etc/portage/package.accept_keywords/${arch}' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.accept_keywords.${arch},destination=/etc/portage/package.accept_keywords/${arch}${docker_readonly:+",${docker_readonly}"}"
fi

# package.license
if [ -e "${base_dir:+"${base_dir}/"}etc/portage/package.license" ]; then
	print "Mounting $( test -d "${base_dir:+"${base_dir}/"}etc/portage/package.license" && echo 'directory' || echo 'file' ) '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.license' to '/etc/portage/package.license' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.license,destination=/etc/portage/package.license${docker_readonly:+",${docker_readonly}"}"
else
	note "No 'package.license' override found in '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/'"
fi

# NB: test -s returns '0' when called on a directory (even if it's empty...)
#
# package.unmask
if [ -s "${base_dir:+"${base_dir}/"}etc/portage/package.unmask/${package_name#*.}" ] && ! [ -d "${base_dir:+"${base_dir}/"}etc/portage/package.unmask/${package_name#*.}" ]; then
	print "Mounting file '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.unmask/${package_name#*.}' to '/etc/portage/package.unmask/${package_name#*.}' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.unmask/${package_name#*.},destination=/etc/portage/package.unmask/${package_name#*.}${docker_readonly:+",${docker_readonly}"}"
elif [ -s "${base_dir:+"${base_dir}/"}etc/portage/package.unmask/package.unmask" ] && ! [ -d "${base_dir:+"${base_dir}/"}etc/portage/package.unmask/package.unmask" ]; then
	print "Mounting file '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.unmask/package.mask' to '/etc/portage/package.mask/package.unmask' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.unmask/package.unmask,destination=/etc/portage/package.unmask/package.unmask${docker_readonly:+",${docker_readonly}"}"
elif [ -s "${base_dir:+"${base_dir}/"}etc/portage/package.unmask" ] && ! [ -d "${base_dir:+"${base_dir}/"}etc/portage/package.unmask" ]; then
	print "Mounting file '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.unmask' to '/etc/portage/package.mask/package.unmask' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.unmask,destination=/etc/portage/package.unmask/package.unmask${docker_readonly:+",${docker_readonly}"}"
else
	note "No 'package.unmask' override found in '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.unmask/'"
fi
if [ -e "${base_dir:+"${base_dir}/"}etc/portage/package.unmask.${arch:-}" ]; then
	print "Mounting file '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.unmask.${arch}' to '/etc/portage/package.unmask/${arch}' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.unmask.${arch},destination=/etc/portage/package.unmask/${arch}${docker_readonly:+",${docker_readonly}"}"
fi

# package.mask
if [ -s "${base_dir:+"${base_dir}/"}etc/portage/package.mask/${package_name#*.}" ] && ! [ -d "${base_dir:+"${base_dir}/"}etc/portage/package.mask/${package_name#*.}" ]; then
	print "Mounting file '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.mask/${package_name#*.}' to '/etc/portage/package.mask/${package_name#*.}' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.mask/${package_name#*.},destination=/etc/portage/package.mask/${package_name#*.}${docker_readonly:+",${docker_readonly}"}"
elif [ -s "${base_dir:+"${base_dir}/"}etc/portage/package.mask/package.mask" ] && ! [ -d "${base_dir:+"${base_dir}/"}etc/portage/package.mask/package.mask" ]; then
	print "Mounting file '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.mask/package.mask' to '/etc/portage/package.mask/package.mask' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.mask/package.mask,destination=/etc/portage/package.mask/package.mask${docker_readonly:+",${docker_readonly}"}"
elif [ -s "${base_dir:+"${base_dir}/"}etc/portage/package.mask" ] && ! [ -d "${base_dir:+"${base_dir}/"}etc/portage/package.mask" ]; then
	print "Mounting file '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.mask' to '/etc/portage/package.mask/package.mask' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.mask,destination=/etc/portage/package.mask/package.mask${docker_readonly:+",${docker_readonly}"}"
else
	note "No 'package.mask' override found in '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.mask/'"
fi
if [ -e "${base_dir:+"${base_dir}/"}etc/portage/package.mask.${arch:-}" ]; then
	print "Mounting file '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.mask.${arch}' to '/etc/portage/package.mask/${arch}' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.mask.${arch},destination=/etc/portage/package.mask/${arch}${docker_readonly:+",${docker_readonly}"}"
fi

# package.use
if [ -s "${base_dir:+"${base_dir}/"}etc/portage/package.use/${package_name#*.}" ]; then
	print "Mounting file '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.use/${package_name#*.}' to '/etc/portage/package.use/${package_name#*.}' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.use/${package_name#*.},destination=/etc/portage/package.use/${package_name#*.}${docker_readonly:+",${docker_readonly}"}"
fi
if [ -s "${base_dir:+"${base_dir}/"}etc/portage/package.use" ]; then
	print "Mounting file '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.use' to '/etc/portage/package.use/package.use' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.use/package.use,destination=/etc/portage/package.use/package.use${docker_readonly:+",${docker_readonly}"}"
fi
if ! echo "${DOCKER_EXTRA_MOUNTS}" | grep -Fq -- 'etc/portage/package.use/package.use'; then
	note "No 'package.use' override found in '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.use/'"
fi

# python_targets
if [ -s "${base_dir:+"${base_dir}/"}etc/portage/package.use/python_targets" ]; then
	print "Mounting file '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.use/python_targets' to '/etc/portage/package.use/python_targets' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.use/python_targets,destination=/etc/portage/package.use/python_targets${docker_readonly:+",${docker_readonly}"}"
fi

# php_targets
if [ -s "${base_dir:+"${base_dir}/"}etc/portage/package.use/php_targets" ]; then
	print "Mounting file '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.use/php_targets' to '/etc/portage/package.use/php_targets' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.use/php_targets,destination=/etc/portage/package.use/php_targets${docker_readonly:+",${docker_readonly}"}"
fi

#for webappdir in $( find /var/www/localhost/htdocs/ -mindepth 2 -maxdepth 2 -type d -print ); do
#	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${webappdir}/,destination=${webappdir}/"
#done
while IFS= read -r -d '' webappdir; do
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${webappdir}/,destination=${webappdir}/"
done < <( find /var/www/localhost/htdocs/ -mindepth 2 -maxdepth 2 -type d -print0 )
unset webappdir
export DOCKER_EXTRA_MOUNTS

images="$( $docker image list --noheading "${container_prefix}-${package_name}:${package_version}" 2>&1 )"
if echo "${images:-}" | grep -q -- "${container_prefix}-${package_name}\s\+${package_version}\s" &&
	! echo " ${*:-} " | grep -Eq -- ' -(f|-force) '
then
	output >&2
	output >&2 " ${blue}*${reset} Re-using existing '${package_name}:${package_version}' root image ..."
else
	output >&2
	output >&2 " ${blue}*${reset} Building '${package_name}:${package_version}' root image ..."
	output >&2

	trap '' INT
	$docker container stop "${container_prefix}-${container_name}" 2>/dev/null || :
	$docker container rm --volumes "${container_prefix}-${container_name}" 2>/dev/null || :
	trap - INT

	build_use="${USE:+"${USE} "}lib-only"

	# shellcheck disable=SC2086 # We don't want a null argument if there are no ${extra_pkgs} items
	USE="${build_use:-}" \
	ROOT="/" \
	name="${container_prefix}-${container_name}" \
	image="${IMAGE}" \
	_docker_run \
				  ${pre_remove:+"--pre-remove=${pre_remove}"} \
				  ${pre_pkgs:+"--pre-pkgs=${pre_pkgs}"} \
				  ${pre_use:+"--pre-use=${pre_use}"} \
				  ${with_use:+"--with-use=${with_use}"} \
				  ${post_pkgs:+"--post-pkgs=${post_pkgs}"} \
				  ${post_use:+"--post-use=${post_use}"} \
				--usepkg=y \
				--with-bdeps=n \
				--with-bdeps-auto=n \
			"=${package}${repo:+"::${repo}"}" ${extra_pkgs:-} \
		2>&1 | tee ../log/"docker.${container_prefix}-${container_name}.log"
	rc=${?}
	output " -> ${rc}"

	[ "${rc}" = '0' ] || exit 1

	# podman is fragile :(
	trap '' INT
	if ! command -v buildah >/dev/null 2>&1; then
		$docker container commit \
				"${container_prefix}-${container_name}" \
				"${container_prefix}-${package_name}:${package_version}" \
			2>&1 | tee -a ../log/"docker.${container_prefix}-${container_name}.log"
	else
		buildah commit \
					--squash \
				"${container_prefix}-${container_name}" \
				"${container_prefix}-${package_name}:${package_version}" \
			2>&1 | tee -a ../log/"docker.${container_prefix}-${container_name}.log"
	fi
	rc=${?}
	trap - INT
	output " -> ${rc}"

	[ "${rc}" = '0' ] || exit 1
fi
unset images

trap '' INT
$docker container rm --volumes "${container_prefix}-${container_name}" 2>/dev/null || :
trap - INT

output >&2
output >&2 " ${blue}*${reset} Building ${package_name}:${package_version} (${container_cmd}) service image ..."
output >&2

declare -a args=()
# shellcheck disable=SC2207
args+=(
	--build-arg environment_filter="${environment_filter}"
	--build-arg image_name="${container_prefix}-${package_name}"
	--build-arg service_cmd="${container_cmd}"
	  $( [[ -n "${container_cwd:-}" ]] && echo '--build-arg' "service_cwd=${container_cwd}" )
	  $( [[ -n "${fs_name:-}" ]] && echo '--build-arg' "service_fs_name=${fs_name}" )
	--build-arg service_group="${group}"
	--build-arg service_name="${package_name/.//}"
	--build-arg service_name_short="$( cut -d'/' -f 2- <<<"${package_name/.//}" )"
	--build-arg service_user="${user}"
	--build-arg service_version="${package_version}"
	--build-arg SET_TERM="${TERM}"
	--compress
	--file 'Dockerfile.web'
	--format 'docker'
	--squash-all
	--tag "service.www-servers.web-content:latest"
)

# shellcheck disable=SC2001 # POSIX sh compatibility
$docker ${IMAGE_ROOT:+"--storage-opt='' --root ${IMAGE_ROOT}"} \
		image build "${args[@]}" . 2>&1 |
	tee ../log/"docker.web.${container_name}.log"
				#--network slirp4netns \
				#--no-cache \
rc=${?}
output " -> ${rc}"

# Keep image to allow for much faster subsequent rebuilds...
#if [ $(( ${rc:-1} )) -eq 0 ]; then
#	trap '' INT
#	$docker image rm "${container_prefix}-${package_name}:${package_version}" 2>/dev/null || :
#	trap - INT
#fi

set +o xtrace

exit ${rc}
