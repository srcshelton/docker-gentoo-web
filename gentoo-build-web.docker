#! /usr/bin/env bash

set -eu
set -o pipefail

cd "$( dirname "$( readlink -e "${0}" )" )" || exit 1

build_name=''
use_essential=''
docker='docker'
docker_readonly=''
environment_filter=''
# shellcheck disable=SC2034
red=''
blue=''
reset=''

# shellcheck disable=SC1091
[ ! -s common/vars.sh ] || . common/vars.sh

IMAGE="${build_name}:latest"
# shellcheck disable=SC1091
[ -s common/run.sh ] && . common/run.sh >/dev/null

if (( EUID )); then
	die "Please re-run '$( basename "${0}" )' as user 'root'"
fi

service='app-admin/webapp-config'
user='root'
group='root'
container_cwd='/var/www'

package=''
package_name=''
package_version=''
repo=''
container_name=''
docker_resolve "${service%::*}"
# shellcheck disable=SC2001 # POSIX sh compatibility
container_name="$( echo "${package}" | sed 's|/|.|' )"
# shellcheck disable=SC2001 # POSIX sh compatibility
package_name="$( echo "${package_name}" | sed 's|/|.|' )"
fs_name=''
export container_name package_name
echo "${service}" | grep -Fq -- '::' && repo="${service#*::}"

if [ "${container_name}" = 'podman' ]; then
	die "Suspicious container name '${container_name}'"
else
	print "Using container name '${container_name}'"
fi

if [ -z "${package_name:-}" ]; then
	die "Cannot extract package name from service name '${service}' (${package})"
fi
if [ -z "${package_version:-}" ]; then
	die "Cannot extract package version from service name '${service}' (${package})"
fi

pre_remove='' pre_pkgs='' pre_use='' with_use='' extra_pkgs='' post_pkgs='' post_use='' python_target='' ssl_opt='openssl'
# There's probably a better way of doing this, but for now let's assume that
# the python configuration for the root system and the python confguration for
# the container build environment is the same (... which is reasonable, unless
# overridden, as they share a common portage tree and therefore base set of
# python defaults).
python_target="$( portageq envvar 'PYTHON_SINGLE_TARGET' )"

# aolserver apache cherokee gatling lighttpd nginx +portage tracd uwsgi
info "Setting build variables for package 'webapp-config' ..."
pre_use="-lib-only internal-glib python_targets_${python_target}"
pre_pkgs='sys-apps/help2man sys-devel/gcc sys-apps/busybox sys-apps/sed app-admin/eselect app-eselect/eselect-awk dev-lang/php sys-apps/gawk www-servers/lighttpd virtual/httpd-cgi virtual/httpd-fastcgi virtual/httpd-php'
extra_pkgs='sys-apps/sed'
with_use="python_targets_${python_target}"
container_cmd='/bin/true'

if [ -s webapps.conf ]; then
	eval "$(
		# shellcheck disable=SC1091
		. ./webapps.conf # >/dev/null 2>&1
		export -p | grep -E -- ' (webapp_(pkgs|use)|php_extra_use)='
	)"

	print "Adding webapp packages '${webapp_pkgs:-}'"

	post_pkgs="${post_pkgs:+${post_pkgs} }${webapp_pkgs:-}"
	post_use="internal-glib python_targets_${python_target}${php_extra_use:+ ${php_extra_use}}"

	unset webapp_pkgs webapp_use
fi

if [ -z "${container_cmd:-}" ]; then
	die "No container command provided"
elif [ "${container_cmd}" = 'podman' ]; then
	die "Invalid container command '${container_cmd}'"
fi

[ -n "${trace:-}" ] && set -o xtrace

if [ -e "${PWD}/etc/portage/package.accept_keywords" ]; then
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+${DOCKER_EXTRA_MOUNTS} }--mount type=bind,source=${PWD}/etc/portage/package.accept_keywords,destination=/etc/portage/package.accept_keywords/package.accept_keywords${docker_readonly:+,${docker_readonly}}"
else
	warn "No 'package.accept_keywords' override found in '${PWD}/etc/portage/'"
fi
if [ -e "${PWD}/etc/portage/package.license" ]; then
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+${DOCKER_EXTRA_MOUNTS} }--mount type=bind,source=${PWD}/etc/portage/package.license,destination=/etc/portage/package.license${docker_readonly:+,${docker_readonly}}"
else
	warn "No 'package.license' override found in '${PWD}/etc/portage/'"
fi
if [ -e "${PWD}/etc/portage/package.use/package.use" ]; then
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+${DOCKER_EXTRA_MOUNTS} }--mount type=bind,source=${PWD}/etc/portage/package.use/package.use,destination=/etc/portage/package.use/package.use${docker_readonly:+,${docker_readonly}}"
else
	warn "No 'package.use/package.use' override found in '${PWD}/etc/portage/'"
fi
if [ -e "${PWD}/etc/portage/package.use/python_targets" ]; then
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+${DOCKER_EXTRA_MOUNTS} }--mount type=bind,source=${PWD}/etc/portage/package.use/python_targets,destination=/etc/portage/package.use/python_targets${docker_readonly:+,${docker_readonly}}"
else
	warn "No 'package.use/python_targets' override found in '${PWD}/etc/portage/'"
fi
if [ -e "${PWD}/etc/portage/package.use/webapp.use" ]; then
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+${DOCKER_EXTRA_MOUNTS} }--mount type=bind,source=${PWD}/etc/portage/package.use/webapp.use,destination=/etc/portage/package.use/webapp.use${docker_readonly:+,${docker_readonly}}"
else
	warn "No 'package.use/webapp.use' override found in '${PWD}/etc/portage/'"
fi
if [ -e "${PWD}/etc/portage/package.mask" ]; then
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+${DOCKER_EXTRA_MOUNTS} }--mount type=bind,source=${PWD}/etc/portage/package.mask,destination=/etc/portage/package.mask${docker_readonly:+,${docker_readonly}}"
else
	warn "No 'package.mask' override found in '${PWD}/etc/portage/'"
fi
for webappdir in $( find /var/www/localhost/htdocs/ -mindepth 2 -maxdepth 2 -type d -print ); do
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+${DOCKER_EXTRA_MOUNTS} }--mount type=bind,source=${webappdir}/,destination=${webappdir}/"
done
unset webappdir
export DOCKER_EXTRA_MOUNTS

images="$( $docker image ls "buildweb-${package_name}:${package_version}" 2>&1 )"
if echo "${images:-}" | grep -q -- "buildweb-${package_name}\s\+${package_version}\s"; then
	echo >&2
	note " ${blue}*${reset} Re-using existing '${package_name}:${package_version}' root image ..."
else
	echo >&2
	info >&2 " ${blue}*${reset} Building '${package_name}:${package_version}' root image ..."
	echo >&2

	trap '' INT
	$docker stop "buildweb-${container_name}" 2>/dev/null || :
	$docker rm --volumes "buildweb-${container_name}" 2>/dev/null || :
	trap - INT

	# shellcheck disable=SC2086
	(
		# docker's documentation states that volume paths must be
		# absolute, starting with a slash, or else they will be
		# interpreted as named-volume labels. This does not appear to
		# be true (of podman, at least) - but we should try to adhere
		# to the documented standards ...
		#if [ ! -e "${PWD}/etc/portage/package.mask" ] || [ ! -e "${PWD}/etc/portage/package.use" ] ; then
		#	echo >&2 "FATAL: Can't resolve volume source '${PWD}/etc/portage/package.{mask,use}'"
		#	exit 1
		#fi
		#export DOCKER_VOLUMES="--volume ${PWD}/etc/portage/package.mask:/etc/portage/package.mask:ro --volume ${PWD}/etc/portage/package.use:/etc/portage/package.use:ro"

		export USE="${USE:+${USE} }lib-only"
		export ROOT="/"
		export name="buildweb-${container_name}"
		export image="${IMAGE}"
		export DOCKER_VARS="--env CURL_SSL=${ssl_opt}"
		export DOCKER_VARS="--env VERY_BRAVE_OR_VERY_DUMB=yes"  # for busybox
		docker_run \
					${pre_remove:+--pre-remove="${pre_remove}"} \
					${pre_pkgs:+--pre-pkgs="${pre_pkgs}"} \
					${pre_use:+--pre-use="${pre_use} curl_ssl_${ssl_opt}"} \
					${with_use:+--with-use="${with_use} curl_ssl_${ssl_opt}"} \
					${post_pkgs:+--post-pkgs="${post_pkgs}"} \
					${post_use:+--post-use="${post_use} curl_ssl_${ssl_opt}"} \
					--usepkg=y \
					--with-bdeps=n \
					--with-bdeps-auto=n \
				"=${package}${repo:+::${repo}}" ${extra_pkgs:-} 2>&1 |
			tee ../log/"docker.buildweb-${container_name}.log"
	)
	rc=${?}
	echo " -> ${rc}"

	[ "${rc}" = '0' ] || exit 1

	# podman is fragile :(
	trap '' INT
	$docker commit \
			"buildweb-${container_name}" \
			"buildweb-${package_name}:${package_version}" \
		2>&1 | tee -a ../log/"docker.buildweb-${container_name}.log"
	rc=${?}
	trap - INT
	echo " -> ${rc}"

	[ "${rc}" = '0' ] || exit 1
fi
unset images

trap '' INT
$docker rm --volumes "buildweb-${container_name}" 2>/dev/null || :
trap - INT

echo >&2
info >&2 " ${blue}*${reset} Building ${package_name}:${package_version} (${container_cmd}) service image ..."
echo >&2

# shellcheck disable=SC2001 # POSIX sh compatibility
$docker build \
			--build-arg environment_filter="${environment_filter}" \
			--build-arg image_name="buildweb-${package_name}" \
			--build-arg service_cmd="${container_cmd}" \
			  ${container_cwd:+--build-arg service_cwd="${container_cwd}"} \
			  ${fs_name:+--build-arg service_fs_name="${fs_name}"} \
			--build-arg service_group="${group}" \
			--build-arg service_name="$( echo "${package_name}" | sed 's|\.|/|' )" \
			--build-arg service_user="${user}" \
			--build-arg service_version="${package_version}" \
			--build-arg SET_TERM="${TERM}" \
			--compress \
			--file 'Dockerfile.web' \
			--tag "service.www-servers.web-content:latest" \
		.  2>&1 |
	tee ../log/"docker.web.${container_name}.log"
			#--network slirp4netns \
rc=${?}
echo " -> ${rc}"

#if [ $(( ${rc:-1} )) -eq 0 ]; then
#	trap '' INT
#	$docker image rm "buildweb-${package_name}:${package_version}" 2>/dev/null || :
#	trap - INT
#fi

set +o xtrace

exit ${rc} 
