#! /usr/bin/env bash

declare trace="${TRACE:-}"
# shellcheck disable=SC2034
declare debug="${DEBUG:-}"

set -eu
set -o pipefail

cd "$( dirname "$( readlink -e "${0}" )" )" || exit 1

# Set by common/vars.sh, sourced below...
#
#declare build_name=''
#declare base_dir=''
# shellcheck disable=SC2034 # Set from common/vars.sh
#declare use_essential=''
#declare _command='docker'
#declare docker_readonly=''
#declare environment_filter=''
# shellcheck disable=SC2034
#declare red=''
#declare blue=''
#declare reset=''

# shellcheck disable=SC1091
[ ! -s common/vars.sh ] || . common/vars.sh
# shellcheck disable=SC2034 # Set from common/vars.sh
[[ -n "${__COMMON_VARS_INCLUDED:-}" ]] || {
	echo >&2 "FATAL: Inclusion of common defaults failed"
	exit 1
}

# shellcheck disable=SC2034,SC2154
declare IMAGE="${build_name}:latest"
# shellcheck disable=SC1091
[ -s common/run.sh ] && . common/run.sh >/dev/null

if (( EUID )); then
	die "Please re-run '$( basename "${0}" )' as user 'root'"
fi

service='app-admin/webapp-config'
user='root'
group='root'
container_cwd='/var/www'

#declare package=''
#declare package_name=''
#declare package_version=''
#declare repo=''
#declare container_name=''
container_prefix='buildweb'
_docker_resolve "${service%"::"*}" "${container_prefix}"
# shellcheck disable=SC2001 # POSIX sh compatibility
container_name="$( echo "${package}" | sed 's|/|.|' )"
# shellcheck disable=SC2001 # POSIX sh compatibility
package_name="$( echo "${package_name}" | sed 's|/|.|' )"
#declare fs_name=''
export container_name package_name
echo "${service}" | grep -Fq -- '::' && repo="${service#*"::"}"

if [ $(( $# )) -gt 1 ] || echo " ${*:-} " | grep -Eq -- ' -(h|-help) '; then
	output >&2 "Usage: $( basename "${0}" ) [--force]"
	output >&2
	output >&2 "Options:"
	output >&2 "        --force : Always rebuild '${package_name}:${package_version}' root image"
	output >&2
	exit 0
fi


if [ "${container_name}" = 'podman' ]; then
	die "Suspicious container name '${container_name}'"
else
	print "Using container name '${container_name}'"
fi

if [ -z "${package_name:-}" ]; then
	die "Cannot extract package name from service name '${service}' (${package})"
fi
if [ -z "${package_version:-}" ]; then
	die "Cannot extract package version from service name '${service}' (${package})"
fi


# from common/vars.sh:
#use_essential="asm ipv6 ithreads mdev nptl threads tls-heartbeat zlib ${use_cpu_flags}"

declare pre_remove='' pre_pkgs='' pre_use=''
declare with_use='' extra_pkgs=''
declare post_pkgs='' post_use=''
declare php_target=''
declare python_target=''

# There's probably a better way of doing this, but for now let's assume that
# the php & python configuration for the root system and the confguration for
# the container build environment is the same (... which is reasonable, unless
# overridden, as they share a common portage tree and therefore base set of
# python defaults).
php_target="$( portageq envvar 'PHP_TARGETS' )"
python_target="$( portageq envvar 'PYTHON_SINGLE_TARGET' )"
print "Building for php version '${php_target}'"
print "Building for python version '${python_target}'"

declare php_targets="$( for t in $( portageq envvar PHP_TARGETS ); do echo "php_targets_${t}"; done | sort -V | head -n 1 )"
print "Building for PHP version(s) '${php_targets}'"
unset php_targets


info "Setting build variables for package 'webapp-config' ..."
pre_pkgs='sys-apps/portage dev-libs/libpcre2 sys-apps/help2man sys-devel/gcc sys-apps/busybox sys-apps/grep sys-apps/sed sys-apps/gawk app-alternatives/awk app-admin/eselect dev-lang/php www-servers/lighttpd virtual/httpd-cgi virtual/httpd-fastcgi virtual/httpd-php'
print "'use_essential_gcc' is '${use_essential_gcc}'"
pre_use="$( replace_flags \
		"${use_essential_gcc:-}" \
		'-lib-only' 'gawk' 'internal-glib' 'pcre' 'ssl' 'unicode' \
		"php_targets_${php_target}" \
		"python_targets_${python_target}" \
		"python_single_target_${python_target}" \
	-- "${pre_use[@]:-}"
)"
extra_pkgs='sys-apps/sed'
# aolserver apache cherokee gatling lighttpd nginx +portage tracd uwsgi
with_use="$( # <- Syntax
	replace_flags \
			"php_targets_${php_target}" \
			"python_targets_${python_target}" \
			"python_single_target_${python_target}" \
		-- "${with_use[@]:-}"
)"
post_pkgs='sys-devel/gcc'
post_use="$( replace_flags 'lib-only' -- "${post_use[@]:-}" )"
container_cmd='/bin/true'

if ! [ -s content/webapps.conf ]; then
	warn "file 'content/webapps.conf' not found - only static content will be served"
	sleep 5
else
	declare webapp_pkgs=''
	declare webapp_use=''
	declare php_extra_use=''

	eval "$( # <- Syntax
		# shellcheck disable=SC1091
		. ./content/webapps.conf # >/dev/null 2>&1
		export -p | grep -E -- ' (webapp_(pkgs|use)|php_extra_use)='
		#export -p | grep -- ' webapp_pkgs='
	)"

	if [ -z "${webapp_pkgs:-}" ]; then
		warn "file 'content/webapps.conf' defines no webapps - only static content will be served"
		sleep 5
	else
		print "Adding webapp packages '${webapp_pkgs:-}'"
	fi

	extra_pkgs="${extra_pkgs:+"${extra_pkgs} "}${webapp_pkgs:+"${webapp_pkgs} "}sys-apps/busybox"
	with_use="$( # <- Syntax
		replace_flags \
				'internal-glib' 'make-symlinks' \
				"${php_extra_use:-}" "php_targets_${php_target}" \
				"python_targets_${python_target}" \
				"${webapp_use:-}" \
			-- "${with_use[@]:-}"
	)" # static

	unset webapp_pkgs webapp_use php_extra_use
fi

if [ -z "${container_cmd:-}" ]; then
	die "No container command provided"
elif [ "${container_cmd}" = 'podman' ]; then
	die "Invalid container command '${container_cmd}'"
fi

[ -n "${trace:-}" ] && set -o xtrace

declare -a docker_extra_mounts=()

# package.accept_keywords
if \
		! docker_extra_mounts+=( $( add_mount --print \
				'%base%/etc/portage/package.accept_keywords' \
				'.../package.accept_keywords'
			) ) &&
		! docker_extra_mounts+=( $( add_mount --dir --print \
				'%base%/etc/portage/package.accept_keywords'
			) )
then
	note "No 'package.accept_keywords' override found in '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/'"
fi
[[ -z "${arch:-}" ]] || docker_extra_mounts+=( $( add_mount --print \
		"%base%/etc/portage/package.accept_keywords.${arch}"
		"/etc/portage/package.accept_keywords/${arch}"
	) ) || :

# package.license
if ! docker_extra_mounts+=( $( add_mount --print \
			'%base%/etc/portage/package.license'
		) )
then
	note "No 'package.license' override found in '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/'"
fi

# package.unmask
docker_extra_mounts+=( $( add_mount --print \
		"%base%/etc/portage/package.unmask/${package_name#*"."}"
	) ) || :
if \
		! docker_extra_mounts+=( $( add_mount --print \
				'%base%/etc/portage/package.unmask/package.unmask'
			) ) &&
		! docker_extra_mounts+=( $( add_mount --print \
				'%base%/etc/portage/package.unmask' \
				'.../package.unmask'
			) ) &&
		! docker_extra_mounts+=( $( add_mount --dir --print \
				'%base%/etc/portage/package.unmask'
			) )
then
	note "No 'package.unmask' override found in '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.unmask/'"
fi
[[ -z "${arch:-}" ]] || docker_extra_mounts+=( $( add_mount --print \
		"%base%/etc/portage/package.unmask.${arch}" \
		"/etc/portage/package.unmask/${arch}"
	) ) || :

# package.mask
docker_extra_mounts+=( $( add_mount --print \
		"%base%/etc/portage/package.mask/${package_name#*"."}"
	) ) || :
if \
		! docker_extra_mounts+=( $( add_mount --print \
				'%base%/etc/portage/package.mask/package.mask'
			) ) &&
		! docker_extra_mounts+=( $( add_mount --print \
				'%base%/etc/portage/package.mask' \
				'.../package.mask'
			) ) &&
		! docker_extra_mounts+=( $( add_mount --dir --print \
				'%base%/etc/portage/package.mask'
			) )
then
	note "No 'package.mask' override found in '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.mask/'"
fi
[[ -z "${arch:-}" ]] || docker_extra_mounts+=( $( add_mount --print \
		"%base%/etc/portage/package.mask.${arch}" \
		"/etc/portage/package.mask/${arch}"
	) ) || :

# package.use
docker_extra_mounts+=( $( add_mount --print \
		"%base%/etc/portage/package.use/${package_name#*"."}"
	) ) || :
if \
		! docker_extra_mounts+=( $( add_mount --print \
				'%base%/etc/portage/package.use/package.use'
			) ) &&
		! docker_extra_mounts+=( $( add_mount --dir --print \
				'%base%/etc/portage/package.use'
			) )
then
	note "No 'package.use' override found in '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.use/'"
fi

# python_targets
docker_extra_mounts+=( $( add_mount --print \
		'%base%/etc/portage/package.use/python_targets'
	) ) || :

# php_targets
if [ -s "${base_dir:+"${base_dir}/"}etc/portage/package.use/php_targets" ]; then
	print "Mounting file '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.use/php_targets' to '/etc/portage/package.use/php_targets' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.use/php_targets,destination=/etc/portage/package.use/php_targets${docker_readonly:+",${docker_readonly}"}"
fi
docker_extra_mounts+=( $( add_mount --print \
		'%base%/etc/portage/package.use/php_targets'
	) ) || :

DOCKER_EXTRA_MOUNTS="${docker_extra_mounts[*]:-}"

#for webappdir in $( find /var/www/localhost/htdocs/ -mindepth 2 -maxdepth 2 -type d -print ); do
#	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${webappdir}/,destination=${webappdir}/"
#done
while IFS= read -r -d '' webappdir; do
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${webappdir}/,destination=${webappdir}/"
done < <( find /var/www/localhost/htdocs/ -mindepth 2 -maxdepth 2 -type d -print0 )
unset webappdir
export DOCKER_EXTRA_MOUNTS

images="$( docker image list --noheading "${container_prefix}-${package_name}:${package_version}" 2>&1 )"
if echo "${images:-}" | grep -q -- "${container_prefix}-${package_name}\s\+${package_version}\s" &&
	! echo " ${*:-} " | grep -Eq -- ' -(f|-force) '
then
	output >&2
	output >&2 " ${blue}*${reset} Re-using existing '${package_name}:${package_version}' root image ..."
else
	output >&2
	output >&2 " ${blue}*${reset} Building '${package_name}:${package_version}' root image ..."
	output >&2

	trap '' INT
	docker container stop "${container_prefix}-${container_name}" 2>/dev/null || :
	docker container rm --volumes "${container_prefix}-${container_name}" 2>/dev/null || :
	trap - INT

	build_use="$( replace_flags 'lib-only' -- "${USE:-}" )"

	# shellcheck disable=SC2086 # We don't want a null argument if there are no ${extra_pkgs} items
	USE="${build_use:-}" \
	ROOT="/" \
	name="${container_prefix}-${container_name}" \
	image="${IMAGE}" \
	_docker_run \
				  ${pre_remove:+"--pre-remove=${pre_remove}"} \
				  ${pre_pkgs:+"--pre-pkgs=${pre_pkgs}"} \
				  ${pre_use:+"--pre-use=${pre_use}"} \
				  ${with_use:+"--with-use=${with_use}"} \
				  ${post_pkgs:+"--post-pkgs=${post_pkgs}"} \
				  ${post_use:+"--post-use=${post_use}"} \
				--usepkg=y \
				--with-bdeps=n \
				--with-bdeps-auto=n \
			"=${package}${repo:+"::${repo}"}" ${extra_pkgs:-} \
		2>&1 | tee ../log/"docker.${container_prefix}-${container_name}.log"
	rc=${?}
	output " -> ${rc}"

	[ "${rc}" = '0' ] || exit 1

	# podman is fragile :(
	trap '' INT
	if ! command -v buildah >/dev/null 2>&1; then
		docker container commit \
				"${container_prefix}-${container_name}" \
				"${container_prefix}-${package_name}:${package_version}" \
			2>&1 | tee -a ../log/"docker.${container_prefix}-${container_name}.log"
	else
		buildah commit \
					--squash \
				"${container_prefix}-${container_name}" \
				"${container_prefix}-${package_name}:${package_version}" \
			2>&1 | tee -a ../log/"docker.${container_prefix}-${container_name}.log"
	fi
	rc=${?}
	trap - INT
	output " -> ${rc}"

	[ "${rc}" = '0' ] || exit 1
fi
unset images

trap '' INT
docker container rm --volumes "${container_prefix}-${container_name}" 2>/dev/null || :
trap - INT

output >&2
output >&2 " ${blue}*${reset} Building ${package_name}:${package_version} (${container_cmd}) service image ..."
output >&2

declare -a args=()
# shellcheck disable=SC2207
args+=(
	--build-arg environment_filter="${environment_filter}"
	--build-arg image_name="${container_prefix}-${package_name}"
	--build-arg service_cmd="${container_cmd}"
	  #$( [[ -n "${container_cwd:-}" ]] && echo '--build-arg' "service_cwd=${container_cwd}" )
	  #$( [[ -n "${fs_name:-}" ]] && echo '--build-arg' "service_fs_name=${fs_name}" )
	  $( add_arg container_cwd --build-arg "service_cwd=${container_cwd}" )
	  $( add_arg fs_name --build-arg "service_fs_name=${fs_name}" )
	--build-arg service_group="${group}"
	--build-arg service_name="${package_name/.//}"
	--build-arg service_name_short="$( cut -d'/' -f 2- <<<"${package_name/.//}" )"
	--build-arg service_user="${user}"
	--build-arg service_version="${package_version}"
	--build-arg SET_TERM="${TERM}"
	--compress
	--file 'Dockerfile.web'
	--format 'docker'
	--squash-all
	--tag "service.www-servers.web-content:latest"
)

# shellcheck disable=SC2001 # POSIX sh compatibility
#docker ${IMAGE_ROOT:+"--storage-opt='' --root ${IMAGE_ROOT}"} \
docker $( add_arg IMAGE_ROOT --storage-opt= --root "${IMAGE_ROOT}" ) \
		image build "${args[@]}" . 2>&1 |
	tee ../log/"docker.web.${container_name}.log"
				#--network slirp4netns \
				#--no-cache \
rc=${?}
output " -> ${rc}"

# Keep image to allow for much faster subsequent rebuilds...
#if [ $(( ${rc:-1} )) -eq 0 ]; then
#	trap '' INT
#	docker image rm "${container_prefix}-${package_name}:${package_version}" 2>/dev/null || :
#	trap - INT
#fi

set +o xtrace

exit ${rc}
