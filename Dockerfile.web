
# service:
#   Extract a ROOT-installed service.

ARG image_name
ARG service_name
ARG service_version

ARG service_user="root"
ARG service_group="root"
ARG service_cmd="/bin/sh"
ARG service_cwd="/var/www/localhost/htdocs"
ARG service_fs_name
ARG timezone="GB"

ARG ROOT="/"
ARG environment_filter="^(declare -x|export) (EDITOR|GENTOO_PROFILE|HOME|HOSTNAME|LESS(OPEN)?LS_COLORS|(MAN)?PAGER|(OLD)?PWD|PATH|(|SYS|PORTAGE_CONFIG)ROOT|SHLVL|TERM)="

ARG server="lighttpd"
ARG marker=".keep_www-servers_${server}-0"

ARG DEBUG


# -----------------------------------------------------------------------------

# Import system image
#
FROM "${image_name}:${service_version}" AS base

ARG ROOT
ARG environment_filter

ARG server


RUN test -s /usr/libexec/environment.sh

# linter ignore=SC2015,ER0001
RUN { set -o pipefail 2>/dev/null || true ; } ; \
    set -u ; \
    mkdir -p "${ROOT}"/usr/libexec && \
    printf "#FILTER: '%s'\n\n" "${environment_filter}" > "${ROOT}"/usr/libexec/environment.sh && \
    export -p | \
            grep -- '=' | \
            grep -Ev -- "${environment_filter}" | \
            sed -r 's/\s+/ /g' | \
            grep -v '^export [a-z_]' \
        >> "${ROOT}"/usr/libexec/environment.sh && \
    grep >&2 -- ' ROOT=' "${ROOT}"/usr/libexec/environment.sh && { \
            printf >&2 "Invalid 'ROOT' directive in '%s/usr/libexec/environment.sh':\n\n%s\n\n" "${ROOT%"/"}" "$( < "${ROOT}"/usr/libexec/environment.sh )" ; \
            exit 1 ; \
        } || :
#RUN printf >&2 " * 'service' stage propagated environment:\n\n%s\n\n" "$( < "${ROOT}"/usr/libexec/environment.sh )"

# For some reason, webapp-config doesn't seem to get called for *all* installed
# webapps...
RUN { set -o pipefail 2>/dev/null || true ; } ; \
    if [ -d /usr/share/webapps ]; then \
        rm -r /etc/portage/repos.conf ; \
        for webapp in $( find /usr/share/webapps/ -mindepth 1 -maxdepth 1 -type d -print ); do \
            for version in $( find "${webapp}"/ -mindepth 1 -maxdepth 1 -type d -print ); do \
                find "${version}"/ -mindepth 1 -maxdepth 1 -iname '*.md' -or -iname 'Dockerfile' -delete ; \
                webapp="$( basename "${webapp}" )" ; \
                version="$( basename "${version}" )" ; \
                if [ -e "/var/www/localhost/htdocs/${webapp}" ]; then \
                    echo "Upgrading existing webapp '${webapp}:${version}' ..." ; \
                    webapp-config -s "${server}" -h localhost -d "${webapp}" -U "${webapp}" "${version}" 2>/dev/null || \
                    webapp-config -s "${server}" -h localhost -d "${webapp}" -I "${webapp}" "${version}" || : ; \
                else \
                    echo "Installing new webapp '${webapp}:${version}' ..." ; \
                    webapp-config -s "${server}" -h localhost -d "${webapp}" -I "${webapp}" "${version}" || : ; \
                fi ; \
            done ; \
        done ; \
    fi


# -----------------------------------------------------------------------------

# Create a new container
#
FROM scratch

ARG service_name
ARG service_version

ARG service_user
ARG service_group
ARG service_cmd
ARG service_fs_name
ARG timezone="GB"

ENV service_cmd="${service_cmd}"
ENV fs_name="${service_fs_name}"
ARG ROOT

ARG marker

ARG DEBUG

# Copy the installed tree into the current image
#
#COPY --from=base "${ROOT}" /
COPY --from=base /bin/busybox /bin/
COPY --from=base /usr/share/doc /usr/share/doc/
#COPY --from=base /usr/share/info /usr/share/info/
COPY --from=base /usr/share/man /usr/share/man/
#COPY --from=base /var/db/pkg /var/db/

SHELL ["/bin/busybox", "sh", "-c"]
RUN busybox mkdir -p /sbin
RUN busybox --install -s

SHELL ["/bin/sh", "-c"]
RUN test -d /usr/share/doc && \
    test -d /usr/share/man
#    test -d /usr/share/info && \

COPY --from=base /usr/libexec/environment.sh /usr/libexec/
RUN test -s /usr/libexec/environment.sh

COPY --from=base /etc/group /etc/
#COPY --from=base /etc/gshadow /etc/  # Doesn't exist in source image
COPY --from=base /etc/passwd /etc/
COPY --from=base /etc/shadow /etc/
#COPY --from=base /etc/ethertypes /etc/  # Doesn't exist in source image
COPY --from=base /etc/networks /etc/
COPY --from=base /etc/protocols /etc/
COPY --from=base /etc/services /etc/
COPY --from=base /etc/shells /etc/
COPY --from=base "/usr/share/zoneinfo/${timezone}" /etc/localtime

COPY --from=base /var/www /var/www/
COPY --from=base /var/db/webapps /var/db/webapps/
RUN test -d /var/www/localhost && \
    test -e /var/db/webapps/.keep_app-admin_webapp-config-0

COPY content/sites /var/www/
COPY content/cgi-bin /var/www/localhost/cgi-bin/
COPY content/htdocs /var/www/localhost/htdocs/
COPY --chown=nobody:lighttpd content/config /srv/config/
RUN find /var/www/ -type f -name .gitkeep -delete ; \
    find /srv/config/ -type f -name .gitkeep -delete ; \
    test -e "/var/www/${marker}" && \
    test -e "/var/www/localhost/htdocs/${marker}"
    #test -e "/var/www/localhost/cgi-bin/${marker}" && \

LABEL maintainer="stuart@shelton.me"
LABEL Description="Gentoo ${service_name}-${service_version} web volume container"

# Try to get nice colours ...
#
ARG SET_TERM="${TERM:-xterm}"
ENV TERM="${SET_TERM}"

RUN echo "${service_cmd}" ; \
    test -x "${service_cmd}"

# Ensure that all of the relevant users and groups exist inside the
# container ...
#
COPY content/passwd content/group /tmp/
RUN { \
        test ! -s /tmp/passwd || cat /tmp/passwd >> /etc/passwd ; \
        test ! -s /tmp/group || cat /tmp/group >> /etc/group ; \
    } ; \
    cut -d':' -f 3,4,6 /etc/passwd | while IFS=':' read -r u g d; do \
        [ "${d}" = '/dev/null' ] && continue ; \
        mkdir -p "${d}" ; \
        if echo "${d}" | grep -q '^/home'; then \
            chown "${u}:${g}" "${d}" && chmod 0750 "${d}" ; \
        fi ; \
    done ; \
    rm /tmp/passwd /tmp/group

# Remove extraneous documentation & manpages ...
#
RUN find /usr/share/doc/ \
        -depth \
        -mindepth 1 \
        -maxdepth 1 \
        -type d \
        -not -name 'webapp-config-*' \
        $( \
            find /var/db/webapps/ \
                -mindepth 2 \
                -maxdepth 2 \
            | cut -d'/' -f 5-6 \
            | sed 's|/|-|' \
            | while read -r w; do \
                echo -n "-not -name \"${w}\" "; \
            done \
        ) \
        -exec rm -r {} + && \
    find /usr/share/man/ \
        -type l \
        -not -name 'webapp-config.*' \
        -delete && \
    find /usr/share/man/ \
        -type f \
        -not -name 'webapp-config.*' \
        -delete && \
    find /usr/share/man \
        -depth \
        -type d \
        -exec \
            rmdir -p --ignore-fail-on-non-empty {} + || :

# Deploy configuration and relocate (remaining) documentation, info-pages, and
# manpages for later collection using '--volumes-from' ...
#
# linter ignore=ER0003
RUN { set -o pipefail 2>/dev/null || true ; } ; \
    ( \
        handle_object() { \
            src="${1:-}" ; \
            dst="${2:-}" ; \
            trim="${PWD}" ; \
            [ -n "${src:-}" -a -n "${dst:-}" ] || return ; \
            [ -e "${src}" ] || [ -L "${src}" ] || return ; \
            [ -d "${dst}" ] || mkdir -pm 0775 "${dst}" ; \
            if [ -f "${src}" ] || [ -L "${src}" ]; then \
                if [ -e "${dst%"/"}/${src}" ]; then \
                    echo >&2 ">>> Backing-up existing destination object '${dst%"/"}/${src}' to '${dst%"/"}/${src}.dist'..." ; \
                    mv "${dst%"/"}/${src}" "${dst%"/"}/${src}.dist" ; \
                else \
                    [ -n "${DEBUG}" ] && echo >&2 "--- File '${dst%"/"}/${src}' does not exist prior to deployment ..." ; \
                fi ; \
                dir="$( dirname "${src}" )" ; \
                dir="${dst%"/"}/${dir#"${trim%"/"}/"}" ; \
                [ -n "${DEBUG}" ] && echo >&2 "--> Ensuring directory '${dir}' exists ..." ; \
                mkdir -pm 0775 "${dir}" ; \
                echo >&2 ">>> Deploying file '${src}' to '${dir}' ..." ; \
                mv "${src}" "${dir}"/ ; \
                return ; \
            elif [ -d "${src}" ]; then \
                case "$( basename "${src}" )" in \
                    .git) \
                        [ -n "${DEBUG}" ] && echo >&2 "--> Skipping and removing directory '${src}' ..." ; \
                        rm -rf "${src}" ; \
                        return ;; \
                    .svn) \
                        [ -n "${DEBUG}" ] && echo >&2 "--> Skipping and removing directory '${src}' ..." ; \
                        rm -rf "${src}" ; \
                        return ;; \
                esac ; \
                find "${src}" -mindepth 1 -maxdepth 1 -print | \
                while read -r x; do \
                    x="${x#"${trim%"/"}/"}" ; \
                    [ -n "${DEBUG}" ] && echo >&2 "--- Recursing for object '${x}' ..." ; \
                    handle_object "${x}" "${dst}" ; \
                done ; \
                [ -n "${DEBUG}" ] && echo >&2 "--> Removing processed directory '${src}' ..." ; \
                rmdir "${src}" || ls -lAR "${src}" ; \
                return ; \
            fi ; \
        } ; \
        cd /srv/config || exit 0 ; \
        chmod -R ug+rwX /srv/config/ ; \
        find /srv/config/ -mindepth 1 -maxdepth 1 -type d -print | \
        while read -r base; do \
            app="$( basename "${base}" )" ; \
            echo >&2 "Found content for webapp '${app}' in directory '${base}' ..." ; \
            find "${base}"/ -mindepth 1 -maxdepth 1 -print | \
            while read -r object; do \
                handle_object "${object}" "/var/www/localhost/htdocs"/ ; \
            done ; \
            rmdir "${base}" || ls -lAR "${base}" ; \
        done ; \
        cd / ; \
        rm -f /srv/config/.keep* 2>/dev/null || : ; \
        rmdir /srv/config || ls -lAR /srv/config/ ; \
    ) ; \
    mkdir -p /srv/web-content/usr/share && \
    if [ -d /usr/share/doc ]; then \
        mv /usr/share/doc /srv/web-content/usr/share/ && \
        ln -s ../../srv/web-content/usr/share/doc /usr/share/ ; \
    fi ; \
    if [ -d /usr/share/info ]; then \
        mv /usr/share/info /srv/web-content/usr/share/ && \
        ln -s ../../srv/web-content/usr/share/info /usr/share/ ; \
    fi ; \
    if [ -d /usr/share/man ]; then \
        mv /usr/share/man /srv/web-content/usr/share/ && \
        ln -s ../../srv/web-content/usr/share/man /usr/share/ ; \
    fi

# linter ignore=EW0001
WORKDIR "${service_cwd}"

USER "${service_user}:${service_group}"

VOLUME ["/srv/web-content","/var/www"]

# Must be shell-form ...
# linter ignore=EJ0002
CMD "${service_cmd}"

# vi: set syntax=dockerfile expandtab sw=4 ts=4 nowrap colorcolumn=80:
